/**
 * @fileoverview Firestore Security Rules for Solaris Manager.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-based ownership and role-based access control.
 * Users have full control over their own profiles. Admins have broad access to manage clients and projects.
 * Project managers have write access to projects they are assigned to.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the owning user.
 * - /clients/{clientId}: Stores client company data. Only admins can manage clients.
 * - /projects/{projectId}: Stores project data. Admins and assigned project managers can manage projects.
 * - /projects/{projectId}/weeklyReports/{reportId}: Stores weekly reports for projects. Accessible by admins and assigned project managers.
 * - /milestones/{milestoneId}: Stores predefined project milestones. Accessible by all authenticated users.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no `allow list: if true;` on `/users`).
 * - Role-based access is implemented using custom claims on the user's auth token.
 * - Write access to projects is limited to admins and assigned project managers.
 * - Read access to milestones is public for all authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId) - A user can read their own profile.
     * @allow (create) if isOwner(userId) - A user can create their profile.
     * @allow (update, delete) if isExistingOwner(userId) - A user can update or delete their profile.
     * @deny (get, list) if !isOwner(userId) - A user cannot read another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Read permissions
      allow get: if isOwner(userId);
      allow list: if false;

      // Write permissions
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to client company data.
     * @path /clients/{clientId}
     * @allow (get, list) if isAdmin() - Admins can read client data.
     * @allow (create, update, delete) if isAdmin() - Admins can manage client data.
     * @deny (get, list, create, update, delete) if !isAdmin() - Non-admins cannot manage client data.
     * @principle Restricts client management to admin users.
     */
    match /clients/{clientId} {
      // Read permissions
      allow get: if isAdmin();
      allow list: if isAdmin();

      // Write permissions
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to project data.
     * @path /projects/{projectId}
     * @allow (get, list) if isAdmin() || isManager() - Admins and managers can read project data.
     * @allow (create, update, delete) if isAdmin() || isProjectManager(resource.data.managerId) - Admins and assigned project managers can manage projects.
     * @deny (get, list, create, update, delete) if !isAdmin() && !isProjectManager(resource.data.managerId) - Non-admins and unassigned managers cannot manage projects.
     * @principle Restricts project management to admins and assigned project managers.
     */
    match /projects/{projectId} {
      // Read permissions
      allow get: if isAdmin() || isManager();
      allow list: if isAdmin() || isManager();

      // Write permissions
      allow create: if isAdmin() || request.auth.uid == request.resource.data.managerId;
      allow update: if (isAdmin() || isProjectManager(resource.data.managerId)) && resource != null;
      allow delete: if (isAdmin() || isProjectManager(resource.data.managerId)) && resource != null;

      /**
       * @description Controls access to weekly progress reports for a specific project.
       * @path /projects/{projectId}/weeklyReports/{reportId}
       * @allow (get, list) if isAdmin() || isProjectManager(get(/databases/$(database)/documents/projects/$(projectId)).data.managerId) - Admins and assigned project managers can read reports.
       * @allow (create, update, delete) if isAdmin() || isProjectManager(get(/databases/$(database)/documents/projects/$(projectId)).data.managerId) - Admins and assigned project managers can manage reports.
       * @deny (get, list, create, update, delete) if !isAdmin() && !isProjectManager(get(/databases/$(database)/documents/projects/$(projectId)).data.managerId) - Non-admins and unassigned managers cannot manage reports.
       * @principle Restricts report management to admins and assigned project managers of the parent project.
       */
      match /weeklyReports/{reportId} {
        // Read permissions
        allow get: if isAdmin() || isProjectManager(get(/databases/$(database)/documents/projects/$(projectId)).data.managerId);
        allow list: if isAdmin() || isProjectManager(get(/databases/$(database)/documents/projects/$(projectId)).data.managerId);

        // Write permissions
        allow create: if isAdmin() || isProjectManager(get(/databases/$(database)/documents/projects/$(projectId)).data.managerId);
        allow update: if (isAdmin() || isProjectManager(get(/databases/$(database)/documents/projects/$(projectId)).data.managerId)) && resource != null;
        allow delete: if (isAdmin() || isProjectManager(get(/databases/$(database)/documents/projects/$(projectId)).data.managerId)) && resource != null;
      }
    }

    /**
     * @description Allows read and write access to all authenticated users for milestones.
     * @path /milestones/{milestoneId}
     * @allow (get, list, create, update, delete) if isSignedIn() - All authenticated users can manage milestones.
     * @deny None.
     * @principle Allows public read access and authenticated write access to milestones.
     */
    match /milestones/{milestoneId} {
      // Read permissions
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write permissions
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
     /**
     * @description Allows read and write access to all authenticated users for project types.
     * @path /projectTypes/{projectTypeId}
     * @allow (get, list, create, update, delete) if isSignedIn() - All authenticated users can manage project types.
     * @deny None.
     * @principle Allows public read access and authenticated write access to project types.
     */
        match /projectTypes/{projectTypeId} {
      // Read permissions
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      // Write permissions
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }

  function isManager() {
    return request.auth.token.role == 'manager';
  }

  function isProjectManager(managerId) {
    return isSignedIn() && request.auth.uid == managerId;
  }
}