
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user within the Solaris Manager application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The user's role within the application (e.g., 'admin', 'manager')."
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Client": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Client",
      "type": "object",
      "description": "Represents a client company that Solaris Manager works with.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the client entity."
        },
        "name": {
          "type": "string",
          "description": "The client's company name."
        },
        "email": {
          "type": "string",
          "description": "The client's email address.",
          "format": "email"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the client."
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project being managed by Solaris Manager.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the project."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the project."
        },
        "projectType": {
          "type": "string",
          "description": "The type of project (e.g., solar, wind, boiler, lighting)."
        },
        "clientId": {
          "type": "string",
          "description": "Reference to Client. (Relationship: Client 1:N Project)"
        },
        "managerId": {
          "type": "string",
          "description": "Reference to User (Manager). (Relationship: User 1:N Project)"
        },
        "startDate": {
          "type": "string",
          "description": "The project's start date.",
          "format": "date-time"
        },
        "estimatedEndDate": {
          "type": "string",
          "description": "The project's estimated end date.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The current status of the project."
        },
        "milestones": {
            "type": "array",
            "description": "An array of milestones specific to this project, including their scheduled dates.",
            "items": {
                "type": "object",
                "properties": {
                    "milestoneId": {
                        "type": "string",
                        "description": "ID of the milestone template."
                    },
                    "milestoneStartDate": {
                        "type": "string",
                        "description": "The scheduled start date for this milestone in this project.",
                        "format": "date-time"
                    },
                    "milestoneEndDate": {
                        "type": "string",
                        "description": "The scheduled end date for this milestone in this project.",
                        "format": "date-time"
                    }
                },
                "required": ["milestoneId", "milestoneStartDate", "milestoneEndDate"]
            }
        }
      },
      "required": [
        "id",
        "name",
        "projectType",
        "clientId",
        "managerId",
        "startDate",
        "estimatedEndDate",
        "status",
        "milestones"
      ]
    },
    "WeeklyReport": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WeeklyReport",
      "type": "object",
      "description": "Represents a weekly progress report for a project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the weekly report entity, generated by Firestore."
        },
        "projectId": {
          "type": "string",
          "description": "Reference to Project. (Relationship: Project 1:N WeeklyReport)"
        },
        "week": {
          "type": "number",
          "description": "The sequential report number for the project (e.g., 1, 2, 3)."
        },
        "progress": {
          "type": "number",
          "description": "The progress percentage (0-100) for the week."
        },
        "completedSubMilestones": {
          "type": "array",
          "description": "Array of completed sub-milestone IDs for the week.",
          "items": {
            "type": "string"
          }
        },
        "summary": {
          "type": "string",
          "description": "A summary of the week's progress."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the report was created.",
          "format": "date-time"
        },
        "status": {
            "type": "string",
            "description": "The status of the project for that week ('On Track', 'At Risk', 'Off Track')."
        }
      },
      "required": [
        "projectId",
        "week",
        "progress",
        "completedSubMilestones",
        "summary",
        "createdAt",
        "status"
      ]
    },
    "Milestone": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Milestone",
      "type": "object",
      "description": "Represents a predefined project milestone template.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the milestone."
        },
        "name": {
          "type": "string",
          "description": "The name of the milestone."
        },
        "description": {
          "type": "string",
          "description": "A brief description of what the milestone entails."
        },
        "projectTypes": {
          "type": "array",
          "description": "The types of projects this milestone belongs to (e.g., 'solar', 'wind').",
          "items": {
            "type": "string"
          }
        },
        "subMilestones": {
          "type": "array",
          "description": "A list of sub-milestones.",
          "items": {
            "type": "object",
            "properties": {
              "id": {"type": "string"},
              "name": {"type": "string"}
            },
            "required": ["id", "name"]
          }
        }
      },
      "required": [
        "name",
        "projectTypes",
        "subMilestones"
      ]
    },
    "Reminder": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Reminder",
        "type": "object",
        "description": "Represents a user-specific reminder or task.",
        "properties": {
            "id": {
                "type": "string",
                "description": "Unique identifier for the reminder."
            },
            "title": {
                "type": "string",
                "description": "The title of the reminder."
            },
            "date": {
                "type": "string",
                "description": "The date for the reminder in YYYY-MM-DD format.",
                "format": "date"
            },
            "description": {
                "type": "string",
                "description": "An optional description for the reminder."
            },
            "completed": {
                "type": "boolean",
                "description": "Whether the reminder has been completed."
            },
            "createdAt": {
                "type": "string",
                "description": "Timestamp of when the reminder was created.",
                "format": "date-time"
            }
        },
        "required": [
            "title",
            "date",
            "completed",
            "createdAt"
        ]
    },
    "ProjectType": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProjectType",
      "type": "object",
      "description": "Represents a type of project (e.g., Solar, Wind).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project type."
        },
        "name": {
          "type": "string",
          "description": "The name of the project type."
        }
      },
      "required": [
        "name"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/entities/User"
          },
          "description": "Stores user profile data. A user can read/write their own document. Admins (role == 'admin' in token) can perform 'get' and 'list' operations.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/reminders/{reminderId}",
        "definition": {
          "entityName": "Reminder",
          "schema": {
            "$ref": "#/entities/Reminder"
          },
          "description": "Stores user-specific reminders. A user can read and write to their own reminders if the userId in the path matches their own UID (userId == request.auth.uid).",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
                "name": "reminderId",
                "description": "The unique identifier for the reminder."
            }
          ]
        }
      },
      {
        "path": "/clients/{clientId}",
        "definition": {
          "entityName": "Client",
          "schema": {
            "$ref": "#/entities/Client"
          },
          "description": "Stores client company data. Only admins (role == 'admin' in token) can create, read (get/list), and write clients.",
          "params": [
            {
              "name": "clientId",
              "description": "The unique identifier for the client."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/entities/Project"
          },
          "description": "Stores project data. Admins can read/write all projects. Managers can read all projects, but only write to projects they are assigned to (managerId == request.auth.uid).",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}/weeklyReports/{reportId}",
        "definition": {
          "entityName": "WeeklyReport",
          "schema": {
            "$ref": "#/entities/WeeklyReport"
          },
          "description": "Stores weekly progress reports for a specific project. Accessible by admins or managers assigned to the project.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            },
            {
              "name": "reportId",
              "description": "The unique identifier for the weekly report."
            }
          ]
        }
      },
      {
        "path": "/milestones/{milestoneId}",
        "definition": {
            "entityName": "Milestone",
            "schema": {
                "$ref": "#/entities/Milestone"
            },
            "description": "Stores milestone templates. Any authenticated user can read, create, update, and delete milestones.",
            "params": [{
                "name": "milestoneId",
                "description": "The unique identifier for the milestone."
            }]
        }
      },
      {
        "path": "/projectTypes/{projectTypeId}",
        "definition": {
          "entityName": "ProjectType",
          "schema": {
            "$ref": "#/entities/ProjectType"
          },
          "description": "Stores project type templates. Admins can manage them, and any authenticated user can read them.",
          "params": [{
            "name": "projectTypeId",
            "description": "The unique identifier for the project type."
          }]
        }
      }
    ],
    "reasoning": "This Firestore data structure is designed for the Solaris Manager application. It includes role-based access for Users, Clients, and Projects. The structure for WeeklyReports is a subcollection under Projects for clear data hierarchy. A new top-level collection for Milestones is added to store templates, accessible by any authenticated user for management. This supports the workflow of creating milestone templates that can then be applied to projects based on their type. Progress tracking is automated through milestone completion within weekly reports. User reminders are stored in a subcollection under each user, with security rules ensuring only the owner can access them."
  }
}

    